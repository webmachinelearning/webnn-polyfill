'use strict';
import * as utils from '../../../../utils.js';

/* eslint-disable max-len */
describe('CTS converted from NNAPI CTS', () => {
  let context;
  before(async () => {
    context = await navigator.ml.createContext();
  });

  it('test log converted from log test', async () => {
    // Converted test case (from: V1_2/log.mod.py)
    const builder = new MLGraphBuilder(context);
    const input0 = builder.input('input0', {type: 'float32', dimensions: [1, 2, 3, 4, 5]});
    const input0Data = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0]);
    const expected = [-2.3025850929940455, -1.6094379124341003, -1.2039728043259361, -0.916290731874155, -0.6931471805599453, -0.5108256237659907, -0.35667494393873245, -0.2231435513142097, -0.10536051565782628, 0.0, 0.09531017980432493, 0.1823215567939546, 0.26236426446749106, 0.3364722366212129, 0.4054651081081644, 0.47000362924573563, 0.5306282510621704, 0.5877866649021191, 0.6418538861723947, 0.6931471805599453, 0.7419373447293773, 0.7884573603642703, 0.8329091229351039, 0.8754687373538999, 0.9162907318741551, 0.9555114450274363, 0.9932517730102834, 1.0296194171811581, 1.0647107369924282, 1.0986122886681098, 1.1314021114911006, 1.1631508098056809, 1.1939224684724346, 1.2237754316221157, 1.252762968495368, 1.2809338454620642, 1.308332819650179, 1.33500106673234, 1.3609765531356006, 1.3862943611198906, 1.410986973710262, 1.4350845252893227, 1.4586150226995167, 1.4816045409242156, 1.5040773967762742, 1.5260563034950492, 1.547562508716013, 1.5686159179138452, 1.589235205116581, 1.6094379124341003, 1.62924053973028, 1.6486586255873816, 1.667706820558076, 1.6863989535702288, 1.7047480922384253, 1.7227665977411035, 1.7404661748405046, 1.7578579175523736, 1.7749523509116738, 1.791759469228055, 1.8082887711792655, 1.824549292051046, 1.840549633397487, 1.8562979903656263, 1.8718021769015913, 1.8870696490323797, 1.9021075263969205, 1.916922612182061, 1.9315214116032138, 1.9459101490553132, 1.9600947840472698, 1.9740810260220096, 1.9878743481543455, 2.0014800002101243, 2.0149030205422647, 2.028148247292285, 2.0412203288596382, 2.0541237336955462, 2.066862759472976, 2.0794415416798357, 2.0918640616783932, 2.1041341542702074, 2.1162555148025524, 2.128231705849268, 2.1400661634962708, 2.151762203259462, 2.163323025660538, 2.174751721484161, 2.186051276738094, 2.1972245773362196, 2.2082744135228043, 2.2192034840549946, 2.2300144001592104, 2.2407096892759584, 2.2512917986064953, 2.2617630984737906, 2.272125885509337, 2.2823823856765264, 2.2925347571405443, 2.302585092994046, 2.312535423847214, 2.322387720290225, 2.33214389523559, 2.341805806147327, 2.3513752571634776, 2.3608540011180215, 2.3702437414678603, 2.379546134130174, 2.388762789235098, 2.3978952727983707, 2.4069451083182885, 2.4159137783010487, 2.424802725718295, 2.4336133554004498, 2.4423470353692043, 2.451005098112319, 2.4595888418037104, 2.468099531471619, 2.4765384001174837, 2.4849066497880004];
    const output0 = builder.log(input0);
    const graph = await builder.build({output0});
    const outputs = {output0: new Float32Array(utils.sizeOfShape([1, 2, 3, 4, 5]))};
    await context.compute(graph, {'input0': input0Data}, outputs);
    utils.checkValue(outputs.output0, expected, utils.ctsFp32RestrictAccuracyCriteria);
  });

  it('test log converted from log_relaxed test', async () => {
    // Converted test case (from: V1_2/log.mod.py)
    const builder = new MLGraphBuilder(context);
    const input0 = builder.input('input0', {type: 'float32', dimensions: [1, 2, 3, 4, 5]});
    const input0Data = new Float32Array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0]);
    const expected = [-2.3025850929940455, -1.6094379124341003, -1.2039728043259361, -0.916290731874155, -0.6931471805599453, -0.5108256237659907, -0.35667494393873245, -0.2231435513142097, -0.10536051565782628, 0.0, 0.09531017980432493, 0.1823215567939546, 0.26236426446749106, 0.3364722366212129, 0.4054651081081644, 0.47000362924573563, 0.5306282510621704, 0.5877866649021191, 0.6418538861723947, 0.6931471805599453, 0.7419373447293773, 0.7884573603642703, 0.8329091229351039, 0.8754687373538999, 0.9162907318741551, 0.9555114450274363, 0.9932517730102834, 1.0296194171811581, 1.0647107369924282, 1.0986122886681098, 1.1314021114911006, 1.1631508098056809, 1.1939224684724346, 1.2237754316221157, 1.252762968495368, 1.2809338454620642, 1.308332819650179, 1.33500106673234, 1.3609765531356006, 1.3862943611198906, 1.410986973710262, 1.4350845252893227, 1.4586150226995167, 1.4816045409242156, 1.5040773967762742, 1.5260563034950492, 1.547562508716013, 1.5686159179138452, 1.589235205116581, 1.6094379124341003, 1.62924053973028, 1.6486586255873816, 1.667706820558076, 1.6863989535702288, 1.7047480922384253, 1.7227665977411035, 1.7404661748405046, 1.7578579175523736, 1.7749523509116738, 1.791759469228055, 1.8082887711792655, 1.824549292051046, 1.840549633397487, 1.8562979903656263, 1.8718021769015913, 1.8870696490323797, 1.9021075263969205, 1.916922612182061, 1.9315214116032138, 1.9459101490553132, 1.9600947840472698, 1.9740810260220096, 1.9878743481543455, 2.0014800002101243, 2.0149030205422647, 2.028148247292285, 2.0412203288596382, 2.0541237336955462, 2.066862759472976, 2.0794415416798357, 2.0918640616783932, 2.1041341542702074, 2.1162555148025524, 2.128231705849268, 2.1400661634962708, 2.151762203259462, 2.163323025660538, 2.174751721484161, 2.186051276738094, 2.1972245773362196, 2.2082744135228043, 2.2192034840549946, 2.2300144001592104, 2.2407096892759584, 2.2512917986064953, 2.2617630984737906, 2.272125885509337, 2.2823823856765264, 2.2925347571405443, 2.302585092994046, 2.312535423847214, 2.322387720290225, 2.33214389523559, 2.341805806147327, 2.3513752571634776, 2.3608540011180215, 2.3702437414678603, 2.379546134130174, 2.388762789235098, 2.3978952727983707, 2.4069451083182885, 2.4159137783010487, 2.424802725718295, 2.4336133554004498, 2.4423470353692043, 2.451005098112319, 2.4595888418037104, 2.468099531471619, 2.4765384001174837, 2.4849066497880004];
    const output0 = builder.log(input0);
    const graph = await builder.build({output0});
    const outputs = {output0: new Float32Array(utils.sizeOfShape([1, 2, 3, 4, 5]))};
    await context.compute(graph, {'input0': input0Data}, outputs);
    utils.checkValue(outputs.output0, expected, utils.ctsFp32RelaxedAccuracyCriteria);
  });
});
/* eslint-disable max-len */
